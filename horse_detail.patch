--- a/frontend/src/pages/HorseDetail.tsx
+++ b/frontend/src/pages/HorseDetail.tsx
@@ -1,15 +1,22 @@
 import React from "react";
 import { useParams } from "react-router-dom";
 import {
   Box,
   Heading,
   Image,
   Text,
   VStack,
   Divider,
   Button,
 } from "@chakra-ui/react";
-import { useAccount } from "wagmi";
-import { useWriteContract } from "wagmi";
+import { useAccount, usePrepareContractWrite, useContractWrite } from "wagmi";
 import { parseEther } from "viem";
 import { HORSE_TOKEN_ADDRESS, horseTokenABI } from "../utils/contractConfig";
 import horses from "../mocks/horses.json";
+
 // … rest of your imports …
 
 const HorseDetail: React.FC = () => {
   const { id } = useParams();
   const { address } = useAccount();
-  const { writeContractAsync } = useWriteContract();
+  // Prepare the “mint” call (with 0.01 ETH) ahead of time:
+  const { config } = usePrepareContractWrite({
+    address: HORSE_TOKEN_ADDRESS,
+    abi: horseTokenABI,
+    functionName: "mint",
+    args: [address, horses.findIndex((h) => h.id === id), 1],
+    overrides: {
+      value: parseEther("0.01"),
+    },
+    chainId: 11155420,
+    enabled: !!address && !!id, // only prepare once we have an address & id
+  });
+
+  const { writeAsync: mintAsync, isLoading: isMinting } = useContractWrite(config);
 
   const [sharesOwned, setSharesOwned] = React.useState<number | null>(null);
 
   React.useEffect(() => {
@@ -57,26 +64,27 @@ const HorseDetail: React.FC = () => {
   const horse = horses.find((h) => h.id === id);
   if (!horse) {
     return (
       <Box p={6}>
         <Heading>Horse not found</Heading>
         <Text>No horse with ID: {id}</Text>
       </Box>
     );
   }
 
-  const handleBuyShare = async () => {
-    if (!address) {
-      alert("Please connect your wallet.");
-      return;
-    }
-
-    try {
-      const tokenId = horses.findIndex((h) => h.id === id);
-
-      const txHash = await writeContractAsync({
-        address: HORSE_TOKEN_ADDRESS,
-        abi: horseTokenABI,
-        functionName: "mint",
-        args: [address, tokenId, 1],
-        value: parseEther("0.01"),
-      });
-
-      alert(`Transaction sent! Hash: ${txHash}`);
-    } catch (err) {
-      console.error(err);
-      alert("Transaction failed");
-    }
-  };
+  const handleBuyShare = async () => {
+    if (!address || !mintAsync) {
+      alert("Please connect your wallet first.");
+      return;
+    }
+
+    try {
+      const tx = await mintAsync();
+      alert(`Transaction sent! Hash: ${tx.hash}`);
+    } catch (err) {
+      console.error(err);
+      alert("Transaction failed");
+    }
+  };

   return (
     <Box p={6} maxW="700px" mx="auto">
       <Heading mb={4}>{horse.name}</Heading>
       <Image
         src={`/images/${id}.png`}
         alt={horse.name}
         borderRadius="lg"
         boxShadow="md"
         mb={4}
       />
       <Divider mb={4} />
       <VStack spacing={3} align="start">
         <Text>
           <strong>Age:</strong> {horse.age}
         </Text>
         <Text>
           <strong>Trainer:</strong> {horse.trainer}
         </Text>
         <Text>
           <strong>Record:</strong> {horse.record}
         </Text>
         <Text>
           <strong>Earnings:</strong> {horse.earnings}
         </Text>
       </VStack>

-      {sharesOwned !== null && (
-        <Text color="gray.600" mt={2}>
-          You own {sharesOwned} share{sharesOwned === 1 ? "" : "s"} of this horse.
-        </Text>
-      )}
+      {sharesOwned !== null && (
+        <Text color="gray.600" mt={2}>
+          You own {sharesOwned} share{sharesOwned === 1 ? "" : "s"} of this horse.
+        </Text>
+      )}

       <Button
         colorScheme="teal"
         mt={6}
-        onClick={handleBuyShare}
+        onClick={handleBuyShare}
+        isLoading={isMinting}
       >
         Buy Share for 0.01 ETH
       </Button>
     </Box>
   );
 };

 export default HorseDetail;
